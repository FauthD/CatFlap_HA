# Interface to a modified Sureflap Dualscan
# Intended to be used for a ESP32 C3 Supermini board
# Caution: There are several boards with that name, so double check the GPIO, ..
# My board has the ESP32 C3 chip in a 45Â° angle.


substitutions:
  timezone: Europe/Berlin

esphome:
  name: sureflap
  friendly_name: "Cat Flap"
  name_add_mac_suffix: false
  platformio_options:
    board_build.f_flash: 40000000L
    board_build.flash_mode: dio
    board_build.flash_size: 4MB

esp32:
  variant: ESP32C3
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf


# Enable logging
logger:
  level: DEBUG
  logs:
    switch: WARN

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

web_server:
  auth:
    username: !secret web_server_user
    password: !secret web_server_password

ota:
  safe_mode: true
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none
  # reboot_timeout: 0s

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: ${timezone}
  - platform: sntp
    id: sntp_time
    timezone: ${timezone}
    servers:
     - 0.pool.ntp.org
     - 1.pool.ntp.org
     - 2.pool.ntp.org

sun:
  latitude: !secret latitude
  longitude: !secret longitude
  on_sunrise:
    then:
      - switch.turn_off: box_illumination
  on_sunset:
    then:
      - switch.turn_on: box_illumination

sensor:
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 300s

number:
  - platform: template
    name: "Begin Blocking"
    id: begin_blocking
    optimistic: true
    min_value: 16.0
    max_value: 23.5
    step: 0.5
    initial_value: 21.0
    restore_value: True

  - platform: template
    name: "End Blocking"
    id: end_blocking
    optimistic: true
    min_value: 0.5
    max_value: 8.0
    step: 0.5
    initial_value: 5.5
    restore_value: True

binary_sensor:
  - platform: gpio
    name: "Sensor Barrier"
    pin: 
      number: GPIO7
      mode: INPUT_PULLDOWN
    filters:
      - delayed_on: 5ms
      - delayed_off: 100ms
    id: flap_barrier
    on_press:
      then:
        - script.execute: decide_whether_to_open_the_flap
    on_release:
      then:
        - switch.turn_off: flap_blocking

  - platform: gpio
    name: Incomming
    pin: 
      number: GPIO6
      mode: INPUT_PULLDOWN
    filters:
      - delayed_on: 1ms
      - delayed_off: 50ms
    id: incomming

  - platform: gpio
    name: Open
    pin: 
      number: GPIO20
      mode: INPUT_PULLDOWN
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    id: flap_open

  - platform: gpio
    name: Close
    pin: 
      number: GPIO21
      mode: INPUT_PULLDOWN
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    id: flap_close

  - platform: homeassistant
    name: "Vet Switch"
    id: vet_switch
    entity_id: input_boolean.vet_switch

switch:
  - platform: gpio
    pin:
      number: 8
      mode: output
    id: led
  - platform: gpio
    name: "Blocking"
    pin:
      number: 10
      mode: output
    id: flap_blocking
  - platform: gpio
    name: "Flap Illumination"
    pin:
      number: 0
      mode: output
    id: flap_illumination
  - platform: gpio
    name: "Box Illumination"
    pin:
      number: 1
      mode: output
    id: box_illumination

output:
  - platform: ledc
    pin: 5
    id: buzzer

script:
  - id: sound
    mode: single
    parameters:
      duration_ms: int
      frequency_hz: int
      level_p: int
    then:
        ######################################################
        # Must be turned on before setting frequency & level
        ######################################################
      - output.turn_on: buzzer
        ######################################################
        # Frequency sets the wave size
        ######################################################
      - output.ledc.set_frequency:
          id: buzzer
          frequency: !lambda return frequency_hz;
        ######################################################
        # level sets the %age time the PWM is on
        ######################################################
      - output.set_level:
          id: buzzer
          level: !lambda return level_p;
      - delay: !lambda return duration_ms;
      - output.turn_off: buzzer

  - id: blink_illumination
    mode: single
    then:
    - if:
        condition:
          - lambda: |-
              auto now = 0.0;
              if (id(homeassistant_time).now().is_valid())
                now = id(homeassistant_time).now().hour + id(homeassistant_time).now().minute / 60;
              else if (id(sntp_time).now().is_valid())
                now = id(sntp_time).now().hour + id(sntp_time).now().minute / 60;
              return ((now < id(begin_blocking).state) && (now >= id(end_blocking).state) && !id(vet_switch).state);
        then:
        - if:
            condition:
              - sun.is_below_horizon:
            then:
              - switch.turn_on: flap_illumination
            else:
              - switch.turn_off: flap_illumination
        else:
          - switch.toggle: flap_illumination

  - id: block_the_flap
    mode: single
    then:
      - switch.turn_on: flap_blocking
      - script.execute:
          id: sound
          duration_ms: 400
          frequency_hz: 400
          level_p: 20
      - logger.log: "Blocking"

  - id: open_the_flap
    mode: single
    then:
      - switch.turn_off: flap_blocking
      - logger.log: "Allow"

  - id: decide_whether_to_open_the_flap
    mode: single
    then:
    - if:
        condition:
          or:
            - binary_sensor.is_off: incomming
            - lambda: |-
                auto now = 0.0;
                if (id(homeassistant_time).now().is_valid())
                  now = id(homeassistant_time).now().hour + id(homeassistant_time).now().minute / 60;
                else if (id(sntp_time).now().is_valid())
                  now = id(sntp_time).now().hour + id(sntp_time).now().minute / 60;
                return ((now < id(begin_blocking).state) && (now >= id(end_blocking).state) && !id(vet_switch).state);
        then:
          - script.execute: open_the_flap
        else:
          - script.execute: block_the_flap

interval:
  - interval: 1s
    then:
      - switch.toggle: led
      - script.execute: blink_illumination


